const mongoose = require("mongoose");

const favoritePlanSchema = new mongoose.Schema({
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "User",
    required: true,
  },
  planId: {
    type: String,
    required: true,
  },
  name: {
    type: String,
    required: true,
  },
  image: String,
  readyInMinutes: Number,
  servings: Number,
  sourceUrl: String,
  summary: String,
  cuisines: [String],
  dishTypes: [String],
  diets: [String],
  meals: [
    {
      id: Number,
      title: String,
      image: String,
      readyInMinutes: Number,
      sourceUrl: String,
    },
  ],
  nutrition: {
    calories: Number,
    protein: Number,
    fat: Number,
    carbohydrates: Number,
    fiber: Number,
    sugar: Number,
  },
  addedAt: {
    type: Date,
    default: Date.now,
  },
});

// Indeks zapewniający, że użytkownik nie może dodać tego samego planu dwukrotnie
favoritePlanSchema.index({ userId: 1, planId: 1 }, { unique: true });

favoritePlanSchema.statics.addFavorite = async function (userId, planData) {
  // Automatycznie generuj nazwę na podstawie daty i typu planu
  const currentDate = new Date();
  const dateStr = currentDate.toLocaleDateString("pl-PL", {
    day: "2-digit",
    month: "2-digit",
    year: "numeric",
  });

  const calories = planData.nutrition?.calories || 0;
  const dietType =
    planData.diets && planData.diets.length > 0 ? planData.diets[0] : "Ogólny";

  // Generuj automatyczną nazwę
  const autoGeneratedName = `Plan ${calories} kcal - ${dietType} (${dateStr})`;

  const favoriteData = {
    userId,
    planId: planData.id || planData.planId,
    name: autoGeneratedName, // Używaj automatycznie wygenerowanej nazwy
    image: planData.image,
    readyInMinutes: planData.readyInMinutes,
    servings: planData.servings,
    sourceUrl: planData.sourceUrl,
    summary: planData.summary,
    cuisines: planData.cuisines || [],
    dishTypes: planData.dishTypes || [],
    diets: planData.diets || [],
    meals: planData.meals || [],
    nutrition: {
      calories: planData.nutrition?.calories || 0,
      protein: planData.nutrition?.protein || 0,
      fat: planData.nutrition?.fat || 0,
      carbohydrates: planData.nutrition?.carbohydrates || 0,
      fiber: planData.nutrition?.fiber || 0,
      sugar: planData.nutrition?.sugar || 0,
    },
  };

  return await this.create(favoriteData);
};

favoritePlanSchema.statics.removeFavorite = async function (userId, planId) {
  return await this.deleteOne({ userId, planId });
};

favoritePlanSchema.statics.getUserFavorites = async function (userId) {
  return await this.find({ userId }).sort({ addedAt: -1 });
};

module.exports = mongoose.model("FavoritePlan", favoritePlanSchema);
